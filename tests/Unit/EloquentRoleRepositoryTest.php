<?php

namespace Tests\Unit;



use App\Models\Permission;
use App\Models\Role;
use App\Repositories\Role\EloquentRoleRepository;
use App\Repositories\Role\RoleRepository;
use Illuminate\Contracts\Foundation\Application;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class EloquentRoleRepositoryTest extends TestCase
{
    use RefreshDatabase;

    /**
     * @var RoleRepository
     */
    private RoleRepository $repository;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->repository = app(EloquentRoleRepository::class);
    }

    /**
     * @return void
     */
    public function test_create_a_new_role()
    {
        $role = Role::factory()->make()->toArray();
        $createdRole = $this->repository->create($role);
        $this->assertNotNull($createdRole);
        $this->assertInstanceOf(Role::class, $createdRole);
        $this->assertEquals($createdRole->toArray()['name'], $role['name']);
        $this->assertDatabaseHas('roles', ['name' => $createdRole->name]);
    }


    public function test_associate_a_existing_permission_with_a_existing_role()
    {
        $role = Role::factory()->make()->toArray();
        $createdRole = $this->repository->create($role);

        $permission = Permission::factory()->create();
        $createdRole->permissions()->attach($permission);

        $this->assertDatabaseHas('roles', [
            'id' => $createdRole->id,
            'name' => $role['name'],
        ]);

        $this->assertDatabaseHas('permissions', [
            'id' => $permission->id,
            'name' => $permission->name,
        ]);

        $this->assertDatabaseHas('permission_role', [
            'role_id' => $createdRole->id,
            'permission_id' => $permission->id,
        ]);

        $this->assertTrue($createdRole->permissions->contains($permission));
    }

    /**
     * @return void
     */
    public function test_find_a_existing_role()
    {
        $role = Role::factory()->create();
        $foundRole = $this->repository->getById($role->id);

        $this->assertNotNull($foundRole);
        $this->assertInstanceOf(Role::class, $foundRole);
        $this->assertEquals($role->id, $foundRole->id);
    }

    /**
     * @return void
     */
    public function test_delete_a_existing_role()
    {
        $role = Role::factory()->make()->toArray();
        $createdRole = $this->repository->create($role);
        $deleted = $this->repository->delete($createdRole);

        $this->assertTrue($deleted);
        $this->assertDatabaseMissing('roles', ['id' => $createdRole->id]);
    }
}
