<?php

namespace Tests\Unit;

use App\Models\Permission;
use App\Repositories\Permission\EloquentPermissionRepository;
use App\Repositories\Permission\PermissionRepository;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class EloquentPermissionRepositoryTest extends TestCase
{
    use RefreshDatabase;

    /**
     * @var PermissionRepository
     */
    private PermissionRepository $repository;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->repository = app(EloquentPermissionRepository::class);
    }

    /**
     * @return void
     */
    public function test_create_a_new_permission()
    {
        $permission = Permission::factory()->make();
        $createdPermission = $this->repository->create($permission->toArray());

        $this->assertNotNull($createdPermission);
        $this->assertInstanceOf(Permission::class, $createdPermission);
        $this->assertEquals($createdPermission->toArray()['name'], $permission['name']);
        $this->assertDatabaseHas('permissions', ['name' => $createdPermission->name]);
    }

    /**
     * @return void
     */
    public function test_find_a_existing_permission()
    {
        $permission = Permission::factory()->create();
        $foundPermission = $this->repository->getById($permission->id);

        $this->assertNotNull($foundPermission);
        $this->assertInstanceOf(Permission::class, $foundPermission);
        $this->assertEquals($permission->id, $foundPermission->id);
    }

    public function test_delete_a_existing_permission()
    {
        $permission = Permission::factory()->make()->toArray();
        $createdPermission = $this->repository->create($permission);
        $deleted = $this->repository->delete($createdPermission);

        $this->assertTrue($deleted);
        $this->assertDatabaseMissing('permissions', ['id' => $createdPermission->id]);
    }
}
