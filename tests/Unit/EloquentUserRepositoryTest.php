<?php

namespace Tests\Unit;

use App\Models\Permission;
use App\Models\Role;
use App\Models\User;
use App\Repositories\Role\RoleRepository;
use App\Repositories\User\UserRepository;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\Hash;
use Tests\TestCase;

class EloquentUserRepositoryTest extends TestCase
{

    use RefreshDatabase;

    private UserRepository $repository;

    private RoleRepository $roleRepository;




    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->repository = app(UserRepository::class);
        $this->roleRepository = app(RoleRepository::class);
    }

    /**
     * A basic unit test example.
     *
     * @return void
     */
    public function test_create_a_new_user()
    {
        $userData = User::factory()->make()->toArray();
        $userData = array_merge($userData, [
            'password' => Hash::make('password'), // Agregar el password
        ]);
        $user = $this->repository->create($userData);
        $this->assertNotNull($user);
        $this->assertInstanceOf(User::class, $user);
        $this->assertDatabaseHas('users', ['username' => $user->username]);
    }

    public function test_associate_a_existing_user_with_a_existing_role ()
    {
        $userData = User::factory()->make()->toArray();
        $userData = array_merge($userData, [
            'password' => Hash::make('password'), // Agregar el password
        ]);
        $user = $this->repository->create($userData);

        $role = Role::factory()->make()->toArray();
        $createdRole = $this->roleRepository->create($role);

        $permission = Permission::factory()->create();
        $createdRole->permissions()->attach($permission);

        $user->roles()->attach($createdRole);

        $this->assertDatabaseHas('users', [
            'username' => $user->username,
        ]);

        $this->assertDatabaseHas('roles', [
            'name' => $createdRole->name,
        ]);

        $this->assertDatabaseHas('permission_role', [
            'role_id' => $createdRole->id,
            'permission_id' => $permission->id,
        ]);

        $this->assertDatabaseHas('role_user', [
            'user_id' => $user->id,
            'role_id' => $createdRole->id,
        ]);
    }

    public function test_user_has_role()
    {
        $userData = User::factory()->make()->toArray();
        $userData = array_merge($userData, [
            'password' => Hash::make('password'), // Agregar el password
        ]);
        $user = $this->repository->create($userData);

        $roleAdmin = Role::factory()->create(['name' => 'manager']);
        $roleAgent = Role::factory()->create(['name' => 'agent']);

        $user->roles()->attach($roleAdmin);

        $this->assertTrue($user->hasRole('manager'));

        $this->assertFalse($user->hasRole('agent'));
    }


    public function test_user_has_permission()
    {
        $userData = User::factory()->make()->toArray();
        $userData = array_merge($userData, [
            'password' => Hash::make('password'), // Agregar el password
        ]);
        $user = $this->repository->create($userData);

        $role = Role::factory()->create(['name' => 'agent']);
        $permissionCreate = Permission::factory()->create(['name' => 'create-candidates']);
        $permissionView = Permission::factory()->create(['name' => 'view-all-candidates']);

        $role->permissions()->attach($permissionCreate);

        $user->roles()->attach($role);

        $this->assertTrue($user->hasPermission('create-candidates'));

        $this->assertFalse($user->hasPermission('view-all-candidates'));
    }

    public function test_find_an_existing_user()
    {
        $userData = User::factory()->make()->toArray();
        $userData = array_merge($userData, [
            'password' => Hash::make('password'), // Agregar el password
        ]);
        $user = $this->repository->create($userData);

        $foundUser = $this->repository->getById($user->id);
        $this->assertNotNull($foundUser);
        $this->assertInstanceOf(User::class, $foundUser);
        $this->assertEquals($user->id, $foundUser->id);
    }

    public function test_delete_a_existing_user()
    {
        $userData = User::factory()->make()->toArray();
        $userData = array_merge($userData, [
            'password' => Hash::make('password'), // Agregar el password
        ]);
        $user = $this->repository->create($userData);

        $deleted = $this->repository->delete($user);

        $this->assertTrue($deleted);
        $this->assertDatabaseMissing('users', ['id' => $user->id]);
    }

}
